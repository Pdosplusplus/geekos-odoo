<?xml version="1.0" encoding="UTF-8"?>
<odoo>
  <data>

    <!-- Data file form 

    @ function: Crear y modificar registros 
    @ Descrip: Este data file define como sera el formulario, que datos seran registrados por el usuario etc
    -->
    <record model="ir.ui.view" id="project_form_view">

      <field name="name">project.form</field>
      <field name="model">agili.project</field>
      <field name="arch" type="xml">

        <form string="Project Form">
          <!-- State

            @Description: Añadimos la logica y funcionamiento para trabajar con el estado de un proyecto. Con los siguientes botones controlamos el estado.
          -->
          <header>

            <button name="action_process" type="object"
            string="En Proceso"
            states="stopped,done"/>
            <button name="action_stopped" type="object"
            string="Detenido" states="process,done"
            class="oe_highlight"/>
            <button name="action_done" type="object"
            string="Terminado" states="stopped,process"
            class="oe_highlight"/>

            <field name="state" widget="statusbar"/>

          </header>

          <sheet>
            <!-- Agrupamos los campos generales de un proyecto -->
            <group string="General">
              <field name="name"/>
              <field name="description"/>
              <field name="responsible_id"/>
            </group>

            <!-- Agrupamos los campos que generan la toma de decisiones-->
            <group string="Control">
              <field name="start_date"/>
              <field name="end_date"/>
              <field name="hour_man"/>
              <field name="porcen_project" widget="progressbar"/>
            </group>
        
            <!-- Notebook
              @Function: Crear un cuaderno, agrupar mejor la información.

              @Description: Este data file nos permite crear un cuaderno con paginas; donde cada page es una pestaña. 
            -->
            <notebook>
              <!-- Page Actividades 
  
                @Function: Añadir actividades a un proyecto

                @Description: Esta page del notebook nos permite añadir actividades al proyecto y mostramos una lista de ellos solo con los campos necesarios.
              -->
              <page string="Actividades">
                <field name="activity_ids">
                  <tree string="Añade una actividad al proyecto">
                    <field name="name"/>
                    <field name="objetive"/>
                    <field name="ac_hour_man"/>
                    <field name="ac_responsible_id"/>
                  </tree>
                </field>
              </page>

              <!-- Page Entregables 
  
                @Function: Añadir actividades a un proyecto

                @Description: Esta page del notebook nos permite añadir entregables al proyecto y mostramos una lista de ellos solo con los campos necesarios.
              -->
              <page string="Entregables">
                <field name="deliverable_ids">
                  <tree string="Añade un entregable al proyecto">
                    <field name="name"/>
                    <field name="deliverable"/>
                  </tree>
                </field>
              </page>

            </notebook>

          </sheet>
        </form>

      </field>

    </record>


    <!-- Record search 
      @Function: Para realizar la busqueda de los registros
      
      @Description: Con elrecord search definimos de que manera seran buscado los registros, definiendo por cuales campos se haran las busquedas, añadiendo domain entre otros.
    -->
    <record model="ir.ui.view" id="project_search_view">

      <field name="name">project.search</field>
      <field name="model">agili.project</field>

      <field name="arch" type="xml">
        <search>
          <field name="name"/>
          <field name="hour_man"/>
          <field name="description"/>

          <!-- Filter
          
            @Function: Añadir condiciones a las busuqedes

            @Description: En este caso añadimos un filter para que solo sean mostrados los proyectos del usuario logueado.
          -->
          <filter name="my_projects" 
                  string="Mis proyectos"
                  domain="[('responsible_id', '=', uid)]"/>

          <!-- Invocamos al filter creado anteriormente -->
          <group string="Group By">
            <filter name="by_responsible" 
                    string="Responsable" 
                  context="{'group_by': 'responsible_id'}"
            />
          </group>
        </search>

      </field>

    </record>

    <!-- Record tree

      @Function: Listar la información en una tabla

      @Description: Record para mostrar la información en una tabla, donde cada field es una columna.
    -->
    <record model="ir.ui.view" id="project_tree_view">
      <field name="name">project.tree</field>
      <field name="model">agili.project</field>

      <field name="arch" type="xml">
        <tree string="Project Tree">
          <field name="name"/>
          <field name="start_date"/>
          <field name="end_date"/>
          <field name="responsible_id"/>
          <field name="hour_man"/>
          <field name="porcen_project" widget="progressbar"/>
        </tree>
      </field>

    </record>

    <!-- Record Calendar

       @Function: Mostrar mediante un calendario las fechas de inicio y fin de los proyectos
    -->
    <record model="ir.ui.view" id="project_calendar_view">
      <field name="name">project.calendar</field>
      <field name="model">agili.project</field>
      <field name="arch" type="xml">
        
        <calendar string="project Calendar" 
                  date_start="start_date" 
                  date_stop="end_date"
                  color="responsible_id">

          <field name="name"/>

        </calendar>

      </field>
    </record>

    <!-- Record graph

      @Function: Generar graficos (torta, barras..)

      @Description: Grafica comparativas de cuantas actividades tiene un proyecto con respecto a otro.
    -->
    <record model="ir.ui.view" id="project_graph_view">
      <field name="name">project.graph</field>
      <field name="model">agili.project</field>
      <field name="arch" type="xml">
        
        <graph string="Actividades de un proyecto">
          <field name="activity_ids"/>
          <field name="activities_count" type="measure"/>
        </graph>

      </field>

    </record>

      <!-- Tag actions.act_window 
      
        @Function: Este tag o record tiene como funcion contralar el flujo de los views a las acciones de los mismos

        @Descripcion: Una de las cosa que ahce este record es definir el modo en que las vistas seran mostradas, en este caso sera primero el <tree>, <form>, <calendar> ,y de ultimo las graficas <graph>.
      -->
      <record model="ir.actions.act_window" id="project_list_action">

        <field name="name">Proyectos</field>
        <field name="res_model">agili.project</field>
        <field name="view_type">form</field>
        <field name="view_mode">tree,form,calendar,graph</field>
        <field name="context" eval="{'search_default_my_projects': 1}"/>

      </record>

      <!-- Añadimos el menu de la barra top -->
      <menuitem id="main_agili_menu" name="Gestion de Cooperativas"/>

      <!-- Añadimos el menu del panel izquierdo -->
      <menuitem id="agili_menu" 
                name="Gestion de Cooperativas"
                parent="main_agili_menu"/>

      <!-- Añadimos un submenu al menu anterior creado, el cual nos lleva a las views de nuestro modelo -->
      <menuitem id="project_menu" name="Proyecto" 
            parent="agili_menu"
            action="project_list_action"/>

  </data>
</odoo>
